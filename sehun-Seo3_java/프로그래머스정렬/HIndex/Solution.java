package 프로그래머스정렬.HIndex;

//        설명을 보충하고자,이 글 위에 주석을 남깁니다.
//        우선 이 문제에서 이용해야할 포인트는"과학자가 발표한 논문 n편 중, h번 이상 인용된 논문이 h편 이상".
//        즉 다시말해,"h번 이상 인용된 논문이 h편 이상"이라는 것 입니다.
//        또한,당연하게도,h는 무조건 n보다 작거나 같습니다.
//
//        1.Array.sort()로 인용횟수가 적은 논문부터 나열했기 때문에 인용 횟수를 비교하기 쉽게 만듭니다.
//        ex.[3,0,6,1,5]->[0,1,3,5,6]
//
//        2.n=논문의 개수,i=오름차순으로 정렬된 논문들 중 현재 선택한 논문,h=현재 논문을 포함해서 남은 논문의 개수
//        즉,h+i=n 이라고 생각하면 된다.
//
//        3.쉽게,[0,1,3,5,6]을 예시로 하나하나씩 조건을 따져보겠습니다.
//        3-1)첫 번째(i=0)논문(citations[0]=0)일때,h=5(뒤쪽 남은 논문 수)
//        ->0>=5이므로 조건 불만족
//
//        ...
//
//        3-3)세 번째(i=2)논문(citations[2]=3)일때,h=3(뒤쪽 남은 논문 수)
//        ->3>=3이므로 조건 만족!->h-index=3이 됩니다.
//        3-4)...는 안해도 됩니다.조건 불만족 or 만족 여부를 떠나,h-index은 3보다 작기 때문입니다.(조건 한번 할때마다 1씩 줄어들음)
//        따라서 break 를 통해 answer=h 로 해주고,종료해줍니다.->Arrays.sort()의 이유가 여기에 드러납니다.
//
//        정리하자면,h=5->남은 논문이 5편,하지만 5번 이상 인용된 논문(2개)->조건 불만족.
//        h=4->남은 논문이 4편,하지만 4번 이상 인용된 논문(2개)->조건 불만족.
//        h=3->남은 논문이 3편,3번 이상 인용된 논문(3개)->조건 만족.
//        중요한 건"최소 h번 이상 인용된 논문이 h편 이상 존재하는지"입니다.

백준 22282번 h-index 와 같은 문제이니까, 이 문제로도 풀어보면 좋을 것 같습니다. - 제가 작성한 Solution2 는 시간초과가 뜨더라구요...

import java.util.Arrays;

class Solution {
    public int solution(int[] citations) {
        int answer = 0;

        // 논문의 인용 횟수 오름차순 정렬
        Arrays.sort(citations);

        int n = citations.length; // 논문의 개수

        for(int i=0; i<n; i++){
            // h는 현재 논문 포함 뒤쪽의 남은 논문 개수
            int h = n - i; // i + h = n
            // 현재 논문의 인용 횟수가 h 이상이면, h개의 논문이 최소 h번 이상 인용되었다는 조건을 만족
            if(citations[i]>=h){
                answer = h; // 처음 만족하는 순간의 h가 최대 H-Index
                break;
            }
        }

        return answer;
    }
}